import React, { useState, useMemo } from 'react';
import { Form, Input, Button, Upload, Image, Spin, Message, Radio } from '@arco-design/web-react';
import useRequest from '../services/useRequest';
import { apiGenerate } from '../services/api';
import DownLoadButton from '../components/download-btn';

import styles from '../styles/index.module.scss';

const FormItem = Form.Item;
const RadioGroup = Radio.Group;

const IMAGE_FIELD = 'image';

function handleFormData(formValues: Partial<any>) {
	const formData = new FormData();
	for (let [field, value] of Object.entries(formValues)) {
		if (field === IMAGE_FIELD) {
			formData.append(field, value[0]?.originFile);
		} else {
			formData.append(field, value);
		}
	}

	return formData;
}

export default function Home() {
	const [imgUrl, setImgUrl] = useState('');
	const [form] = Form.useForm();
	const [imgSize, setImgSize] = useState('512x512');

	const {
		loading: submitLoading,
		run: runGenerate
	} = useRequest(apiGenerate, {
		manual: true,
		onSuccess(data) {
			setImgUrl(data.result)
		}
	});

	const onSubmit = async (event: Event) => {
    event.preventDefault();
		try {
			await form.validate();
			const formValues = form.getFields();
			const formData = handleFormData(formValues);
			// 生成图片
			runGenerate({ formData })
		} catch (e) {
			console.error(e);
			Message.error('validate failed');
		}
  }

	const handleImageSize = (value: any) => {
		setImgSize(value);
	}

	const imageRect = useMemo(() => {
		const w = Number(imgSize.split('x')[0]);
		return { width: w, height: w };
	}, [imgSize])

	return (
		<div className={styles.pageWrapper}>
			<div className={styles.pageContent}>
				<div className={styles.formWrapper}>
					<Form form={form} disabled={submitLoading}>
						<FormItem
							label="Prompt"
							field="prompt"
							required
							rules={[
								{
									validator(v, cb) {
										if (!v) {
											return cb('Prompt is required')
										}
										return cb();
									}
								}
							]}
						>
							<Input
								placeholder="please enter prompt"
							/>
						</FormItem>
						<FormItem
							label="Size"
							field="size"
						>
							<RadioGroup defaultValue='512x512' onChange={handleImageSize}>
								<Radio value='256x256'>256x256</Radio>
								<Radio value='512x512'>512x512</Radio>
								<Radio value='1024x1024'>1024x1024</Radio>
							</RadioGroup>
						</FormItem>
						<FormItem
							label="Image"
							field="image"
							triggerPropName="fileList"
						>
							<Upload
								listType="picture-card"
								imagePreview
								name="files"
								limit={1}
								action="/"
							/>
						</FormItem>
						<FormItem wrapperCol={{ offset: 5 }}>
							<Button
								type="primary"
								loading={submitLoading}
								onClick={onSubmit}
							>Generate Image</Button>
						</FormItem>
					</Form>
					{imgUrl && <div className={styles.actionsWrapper}>
						<DownLoadButton type="primary" className={styles.downloadBtn} imgUrl={imgUrl} disabled={submitLoading} />
					</div>}
				</div>
				<div className={styles.imageWrapper}>
					<Spin
						loading={submitLoading}
						tip="Magic is happening..."
						className={styles.spin}
					>
						<Image 
							alt="an image generated by openai"
							className={styles.image}
							style={{
								width: imageRect.width,
								height: imageRect.height
							}}
							src={imgUrl}
							loader={
								<img
									width={imageRect.width}
									src={imgUrl}
									style={{
										filter: 'blur(5px)'
									}}
								/>
							}
						/>
					</Spin>
				</div>
			</div>
		</div>
	)
}